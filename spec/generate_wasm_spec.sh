#! /usr/bin/env bash
set +x

# This script iterates through each spec file and tries to cross compiler and
# run it on wasm32 platform.
#
# * `failed codegen` annotates specs that error in the compiler.
#   This is mostly caused by some API not being ported to win32 (either the spec
#   target itself or some tools used by the spec).
# * `failed linking` annotats specs that compile but don't link (at least not on
#   basis of the libraries from *Porting to WASM* guide).
#   Most failers are caused by missing libraries (libxml2, libyaml, libgmp,
#   libllvm, libz, libssl), but there also seem to be some incompatibilities
#   with the existing libraries.
# * `failed to run` annotates specs that compile and link but don't properly
#   execute.
#
# PREREQUISITES:
#
# This script requires a working wasm32 build environment as described in
# the [*Porting to WASM* guide](#TODO)
#
# * RUNNER points to a WASM runtime program that executes the compiled binary.
#
# The defaults requires WASI_SDK_PATH to be set appropriately.
#
# USAGE:
#
# For std spec:
# $ spec/generate_wasm_spec.sh > spec/wasm32_std_spec.cr
# For compiler spec:
# $ spec/generate_wasm_spec.sh compiler > spec/wasm32_compiler_spec.cr

SPEC_SUITE=${1:-std}
RUNNER=${RUNNER:-wasmtime run}
WASI_SDK_PATH=${WASI_SDK_PATH:-"$HOME/toolchains/wasi-sdk-10.0"}

INITIAL_MEMORY=${INITIAL_MEMORY:-16777216}
MAX_MEMORY=${MAX_MEMORY:-2147483648}
STACK_SIZE=${STACK_SIZE:-5242880}

export CC="$WASI_SDK_PATH/bin/clang --sysroot=$WASI_SDK_PATH/share/wasi-sysroot"
export LIBRARY_PATH="$WASI_SDK_PATH/share/wasi-sysroot/lib/wasm32-wasi"
export CRYSTAL_LIBRARY_PATH="$HOME/toolchains/crystal-wasm-libs/targets/wasm32-wasi"
export WASM_LDFLAGS="-Wl,--allow-undefined \
-Wl,--initial-memory=${INITIAL_MEMORY} \
-Wl,--max-memory=${MAX_MEMORY}         \
-Wl,-z -Wl,stack-size=${STACK_SIZE}    \
-Wl,--stack-first                      \
-Wl,--no-threads"

if [ -f "bin/crystal" ]; then
  CRYSTAL_BIN=${CRYSTAL_BIN:-bin/crystal}
else
  CRYSTAL_BIN=${CRYSTAL_BIN:-crystal}
fi

command="$0 $*"
echo "# This file is autogenerated by \`${command% }\`"
echo "# $(gdate --rfc-3339 seconds)"
echo

for spec in $(find "spec/$SPEC_SUITE" -type f -iname "*_spec.cr" | sort); do
  require="require \"./${spec##spec/}\""

  if ! linker_command=$($CRYSTAL_BIN build --cross-compile --target wasm32-wasi --static -Dgc_none -Dwithout_zlib -Dwithout_openssl --error-trace --link-flags="$WASM_LDFLAGS" "$spec"); then
    echo "# $require (failed codegen)"
    continue
  fi

  echo "$linker_command" 1>&2

  if ! eval $linker_command >/dev/null; then
    echo "# $require (failed linking)"
    continue
  fi

  binary_path="./$(echo "$linker_command" | grep -oP '(?<=-o\s)(.*)(?=\.wasm)').wasm"

  $RUNNER "$binary_path" --enable-bulk-memory true --enable-reference-types true --enable-multi-value true > /dev/null; exit=$?

  if [ $exit -eq 0 ] || [ $exit -eq 1 ]; then
    echo "$require"
  else
    echo "# $require (failed to run)"
  fi
done
